#!/usr/bin/env ruby
require '../lib/dat'
include Dat
require 'pp'
d = Dict.new
l = Logic.new(d)
g = LogGame.new(:players => ['p1', 'p2'])

def to_dict_entry(word, from)
  str = "#{word.clone} {#{from}}"
  str << (word.type ? " (" << word.type << ") " : " ")
  str << word.definition.strip << " " unless word.definition.strip.empty?
  str << "[#{word.relatives.to_a.join(" ")}]"
end

leaves = Leaves.new(g)
top = leaves.get(1)
File.open('leaves', 'w') do |f|
  top.each do |leaf, neighbor|
    f.puts(to_dict_entry(d[leaf], neighbor[0].get))
  end
end

1.upto(4) do |i|
  p leaves.get(i).size
end




__END__
d = Dict.new
loop do
begin
  b = SimpleBot.new
  g = Game.new(Logger.new()[0], :players => ['p1', b], :dict => d)
  b.init(g)
    m = b.move
  while m && m.size < 15 do # rough measure to check we're always iterating on words
    m = g.play('p1', g.logic.perturb(m.strip, g.used)[0].to_s)
  end
rescue InvalidMove => e
  puts "#{e.message} =, player (#{g.whos_turn}), m: (#{m}), game: (#{g}), last (#{g.last})"
end
end
